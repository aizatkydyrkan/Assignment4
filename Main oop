import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class Passenger {
    private String name;
    private int seatNumber;
    private Aircraft aircraft;
    public Passenger(String name, int seatNumber) {
        this.name = name;
        this.seatNumber = seatNumber;
    }
    public String getName() { return name; }
    public int getSeatNumber() { return seatNumber; }
    public Aircraft getAircraft() { return aircraft; }
    public void setAircraft(Aircraft aircraft) {
        this.aircraft = aircraft;
    }
    @Override
    public String toString() {
        return "Passenger{" + "name='" + name + "', seatNumber=" + seatNumber +
                ", aircraft=" + (aircraft != null ? aircraft.getName() : "None") + "}";
    }
}
class Aircraft {
    private String name;
    private int maxPassengers;
    private Airport airport;
    private List<Passenger> passengers;
    public Aircraft(String name, int maxPassengers) {
        this.name = name;
        this.maxPassengers = maxPassengers;
        this.passengers = new ArrayList<>();
    }
    public String getName() { return name; }
    public int getMaxPassengers() { return maxPassengers; }
    public Airport getAirport() { return airport; }
    public List<Passenger> getPassengers() { return passengers; }
    public void setAirport(Airport airport) {
        this.airport = airport;
    }
    public void addPassenger(Passenger passenger) {
        if (passengers.size() < maxPassengers) {
            passengers.add(passenger);
            passenger.setAircraft(this);
        } else {
            System.out.println("Cannot add passenger, aircraft is full!");
        }
    }
    public void removePassenger(Passenger passenger) {
        passengers.remove(passenger);
        passenger.setAircraft(null);
    }
}
class Airport {
    private String name;
    private List<Aircraft> aircraftVehicles;
    public Airport(String name) {
        this.name = name;
        this.aircraftVehicles = new ArrayList<>();
    }
    public String getName() { return name; }
    public List<Aircraft> getAircraftVehicles() { return aircraftVehicles; }
    public void addAircraft(Aircraft aircraft) {
        aircraftVehicles.add(aircraft);
        aircraft.setAirport(this);
    }
    public void removeAircraft(Aircraft aircraft) {
        aircraftVehicles.remove(aircraft);
        aircraft.setAirport(null);
    }
    public Passenger findPassengerByName(String name) {
        for (Aircraft aircraft : aircraftVehicles) {
            for (Passenger passenger : aircraft.getPassengers()) {
                if (passenger.getName().equalsIgnoreCase(name)) {
                    return passenger;
                }
            }
        }
        return null;
    }
}

public class Main {
    public static void main(String[] args) {
        Airport airport = new Airport("International Airport");
        Aircraft aircraft1 = new Aircraft("Boeing 737", 2);
        Aircraft aircraft2 = new Aircraft("Airbus A320", 3);
        airport.addAircraft(aircraft1);
        airport.addAircraft(aircraft2);
        Passenger p1 = new Passenger("Alina", 1);
        Passenger p2 = new Passenger("Batyr", 2);
        Passenger p3 = new Passenger("Kuka", 3);
        Passenger p4 = new Passenger("Daulet", 4);
        aircraft1.addPassenger(p1);
        aircraft2.addPassenger(p2);
        aircraft2.addPassenger(p3);
        aircraft2.addPassenger(p4);
        System.out.println("Passengers in " + aircraft1.getName() + ": " + aircraft1.getPassengers());
        System.out.println("Passengers in " + aircraft2.getName() + ": " + aircraft2.getPassengers());
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter passenger name: ");
        String passengerName = scanner.nextLine();
        displayPassengerInfo(airport, passengerName);
        scanner.close();
    }

    private static void displayPassengerInfo(Airport airport, String passengerName) {
        Passenger foundPassenger = airport.findPassengerByName(passengerName);
        if (foundPassenger != null) {
            System.out.println("Found passenger: " + foundPassenger);
        } else {
            System.out.println("Passenger not found.");
        }
    }
}
